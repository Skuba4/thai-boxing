from django.http import JsonResponse
from django.template.loader import render_to_string

from django.contrib.auth.mixins import LoginRequiredMixin
from django.http import Http404
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views import View
from django.views.generic import TemplateView, CreateView, ListView, DetailView, UpdateView
from django.shortcuts import get_object_or_404

from referee.forms import CreateRoomForm, FightForm
from referee.models import Room, RoomJudges, Fight, RoundScore


class Home(TemplateView):
    template_name = 'referee/home.html'


class CreateRoom(CreateView):
    model = Room
    template_name = 'referee/create_room.html'
    form_class = CreateRoomForm

    def form_valid(self, form):
        '''form.instance(–æ–±—ä–µ–∫—Ç Room), .boss_room(–æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –ø–æ–ª—é –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏), self.request.user(–∏ –ø—Ä–∏—Å–≤–æ–∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)'''
        form.instance.boss_room = self.request.user
        return super().form_valid(form)

    def get_success_url(self):
        '''–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ detail_room —Å —É—á–µ—Ç–æ–º –∞–¥—Ä–µ—Å–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã'''
        return reverse_lazy('referee:detail_room', kwargs={'uuid_room': self.object.uuid_room})


class MyRooms(ListView):
    model = Room
    template_name = 'referee/my_rooms.html'
    context_object_name = 'object'

    def get_queryset(self):
        return Room.objects.filter(boss_room=self.request.user)


class JoinRoom(View):
    def get(self, request):
        '''–æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'''
        return render(request, 'referee/join_room.html')

    def post(self, request):
        '''–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã, —Ä–∞–±–æ—Ç–∞ —Å uuid'''
        uuid_room = request.POST.get('uuid_room')       # –º–µ—Ç–æ–¥–æ–º —Å–ª–æ–≤–∞—Ä—è get, –≤–∑—è–ª–∏ uuid_room –∏–∑ —à–∞–±–ª–æ–Ω–∞
        user = request.user                             # –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        try:
            room = Room.objects.get(uuid_room=uuid_room)
            RoomJudges.objects.create(room=room, user=user)                 # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            return redirect('referee:detail_room', uuid_room=uuid_room)
        except Room.DoesNotExist:
            return render(request, 'referee/join_room.html', {'error': '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})


class DetailRoom(DetailView):
    model = Room
    template_name = 'referee/room.html'
    context_object_name = 'object'
    slug_field = 'uuid_room'        # –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–æ–¥–µ–ª–∏
    slug_url_kwarg = 'uuid_room'    # –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ path

    def get_context_data(self, **kwargs):
        '''—Ñ–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞'''
        context = super().get_context_data(**kwargs)

        ### –ö–û–ú–ù–ê–¢–ê
        room = context['object']    # –æ–±—ä–µ–∫—Ç –ê–ö–¢–ò–í–ù–û–ô –∫–æ–º–Ω–∞—Ç—ã
        context['uuid'] = room.uuid_room

        ### –°–£–î–¨–ò
        context['is_boss'] = self.request.user == room.boss_room    # –≥–ª–∞–≤–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç
        context['is_active_judge'] = RoomJudges.objects.filter(room=room, user=self.request.user, is_active=True).exists()      # –±–æ–∫–æ–≤–æ–π —Å—É–¥—å—è –∏–ª–∏ –Ω–µ—Ç
        judges = RoomJudges.objects.filter(room=room)
        context['judges'] = judges                                 # –ø–æ–ª—É—á–∏–ª–∏ –í–°–ï–• –±–æ–∫–æ–≤—ã—Ö —Å—É–¥–µ–π
        context['judges_activ'] = judges.filter(is_active=True)    # —Ç–æ–ª—å–∫–æ –ê–ö–¢–ò–í–ù–´–• –±–æ–∫–æ–≤—ã—Ö —Å—É–¥–µ–π

        ### –ë–û–ò(–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä)
        context['fights'] = Fight.objects.filter(room=room)     # –≤—Å–µ –±–æ–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã

        return context

    def get_object(self, queryset=None, **kwargs):
        '''–µ—Å–ª–∏ uuid –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å–≤–æ—é –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π 404'''
        try:
            return get_object_or_404(Room, uuid_room=self.kwargs.get(self.slug_url_kwarg))
        except Http404:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            raise Http404("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º UUID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


class CreateFight(LoginRequiredMixin, CreateView):
    model = Fight
    form_class = FightForm
    template_name = "referee/room.html"

    def form_valid(self, form):
        uuid_room = self.kwargs.get('uuid_room')
        room = get_object_or_404(Room, uuid_room=uuid_room)

        fight = form.save(commit=False)
        fight.room = room
        fight.save()

        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':
            fights = Fight.objects.filter(room=room)
            fights_html = render_to_string('referee/includes/fights_list.html', {'fights': fights}, request=self.request)
            return JsonResponse({'success': True, 'fights_html': fights_html})

        return super().form_valid(form)

    def get_success_url(self):
        return reverse_lazy('referee:detail_room', kwargs={'uuid_room': self.kwargs['uuid_room']})


class DeleteFight(LoginRequiredMixin, View):
    # View –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ajax(–ø—Ä–æ—â–µ) —á–µ–º DeleteView
    def post(self, request, number_fight):
        fight = get_object_or_404(Fight, number_fight=number_fight)

        if fight.room.boss_room != request.user:
            return JsonResponse({'success': False, 'error': '–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–æ–π!'})

        fight.delete()
        fights = Fight.objects.filter(room=fight.room)
        fights_html = render_to_string('referee/includes/fights_list.html', {'fights': fights}, request=request)

        return JsonResponse({'success': True, 'fights_html': fights_html})


class ChangeFight(LoginRequiredMixin, View):
    def post(self, request, number_fight):
        fight = get_object_or_404(Fight, number_fight=number_fight)  # üîç –õ–æ–≤–∏–º –±–æ–π –ø–æ –Ω–æ–º–µ—Ä—É
        print(f"üîç –ù–∞–π–¥–µ–Ω –±–æ–π: {fight}")

        if fight.room.boss_room != request.user:
            print("‚õî –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —Å—É–¥—å—ë–π!")
            return JsonResponse({'success': False, 'error': '–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ–π!'})

        form = FightForm(request.POST, instance=fight)

        if form.is_valid():
            new_number_fight = form.cleaned_data.get('number_fight')
            print(f"üîÑ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –±–æ—è: {new_number_fight}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä
            if Fight.objects.filter(number_fight=new_number_fight).exclude(id=fight.id).exists():
                print("‚ö† –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –±–æ—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return JsonResponse({'success': False, 'error': '–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –±–æ—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'})

            fight.fighter_1 = form.cleaned_data.get('fighter_1')
            fight.fighter_2 = form.cleaned_data.get('fighter_2')
            fight.number_fight = new_number_fight  # üî• –¢—É—Ç –º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä –±–æ—è –ø—Ä—è–º–æ –≤ –æ–±—ä–µ–∫—Ç–µ
            fight.save()

            print("‚úÖ –ë–æ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")

            fights = Fight.objects.filter(room=fight.room)
            fights_html = render_to_string('referee/includes/fights_list.html', {'fights': fights}, request=request)

            return JsonResponse({'success': True, 'fights_html': fights_html})

        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã!")
        print(form.errors)
        return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã'})
